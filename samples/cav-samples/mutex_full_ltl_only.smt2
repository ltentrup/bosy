(declare-datatype S ( (s_0) (s_1) (s_2) ))
(declare-datatype Q ( (T0_init) (accept_all) (accept_S2) (accept_S3) (T0_S4) (T0_S5) (T0_S6) ))
(declare-fun tau (S Bool Bool Bool) S)
(declare-fun g1 (S Bool Bool Bool) Bool)
(declare-fun g2 (S Bool Bool Bool) Bool)
(declare-fun lambda_ (S Q) Bool)
(declare-fun lambda_sharp (S Q) Int)
(assert (lambda_ s_0 T0_init )
	)
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_init )
	 (or (and (and (not (g1 s r1 r2 tie )
	 )
	 r1 )
	 r2 )
	 (and (and (not (g1 s r1 r2 tie )
	 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 r1 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_S2 )
	 (< (lambda_sharp s T0_init )
	 (lambda_sharp s_p accept_S2 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_init )
	 (or (or (and (g1 s r1 r2 tie )
	 (g2 s r1 r2 tie )
	 )
	 (and (g1 s r1 r2 tie )
	 (not r1 )
	 )
	 )
	 (and (g2 s r1 r2 tie )
	 (not r2 )
	 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_all )
	 (< (lambda_sharp s T0_init )
	 (lambda_sharp s_p accept_all )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_init )
	 (or (and (and (not (g2 s r1 r2 tie )
	 )
	 r1 )
	 r2 )
	 (and (and (not (g1 s r1 r2 tie )
	 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 r2 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_S3 )
	 (< (lambda_sharp s T0_init )
	 (lambda_sharp s_p accept_S3 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_init )
	 (or (or (and (not (g2 s r1 r2 tie )
	 )
	 r1 )
	 (and (not (g1 s r1 r2 tie )
	 )
	 r2 )
	 )
	 (and (not (g1 s r1 r2 tie )
	 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p T0_S6 )
	 (<= (lambda_sharp s T0_init )
	 (lambda_sharp s_p T0_S6 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_init )
	 (or (and (and (not (g2 s r1 r2 tie )
	 )
	 r1 )
	 (not r2 )
	 )
	 (and (and (not (g1 s r1 r2 tie )
	 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 (not r2 )
	 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p T0_S5 )
	 (<= (lambda_sharp s T0_init )
	 (lambda_sharp s_p T0_S5 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_init )
	 (or (and (and (not (g1 s r1 r2 tie )
	 )
	 (not r1 )
	 )
	 r2 )
	 (and (and (not (g1 s r1 r2 tie )
	 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 (not r1 )
	 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p T0_S4 )
	 (<= (lambda_sharp s T0_init )
	 (lambda_sharp s_p T0_S4 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s accept_all )
	 true )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_all )
	 (< (lambda_sharp s accept_all )
	 (lambda_sharp s_p accept_all )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s accept_S2 )
	 (not (g1 s r1 r2 tie )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_S2 )
	 (< (lambda_sharp s accept_S2 )
	 (lambda_sharp s_p accept_S2 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s accept_S3 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_S3 )
	 (< (lambda_sharp s accept_S3 )
	 (lambda_sharp s_p accept_S3 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S4 )
	 (and (not (g1 s r1 r2 tie )
	 )
	 (not r1 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p T0_S4 )
	 (<= (lambda_sharp s T0_S4 )
	 (lambda_sharp s_p T0_S4 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S4 )
	 (and (g1 s r1 r2 tie )
	 (not r1 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_all )
	 (< (lambda_sharp s T0_S4 )
	 (lambda_sharp s_p accept_all )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S5 )
	 (and (g2 s r1 r2 tie )
	 (not r2 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_all )
	 (< (lambda_sharp s T0_S5 )
	 (lambda_sharp s_p accept_all )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S5 )
	 (and (not (g2 s r1 r2 tie )
	 )
	 (not r2 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p T0_S5 )
	 (<= (lambda_sharp s T0_S5 )
	 (lambda_sharp s_p T0_S5 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S6 )
	 (or (not (g1 s r1 r2 tie )
	 )
	 (not (g2 s r1 r2 tie )
	 )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p T0_S6 )
	 (<= (lambda_sharp s T0_S6 )
	 (lambda_sharp s_p T0_S6 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S6 )
	 (and (not (g2 s r1 r2 tie )
	 )
	 r2 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_S3 )
	 (< (lambda_sharp s T0_S6 )
	 (lambda_sharp s_p accept_S3 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S6 )
	 (and (not (g1 s r1 r2 tie )
	 )
	 r1 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_S2 )
	 (< (lambda_sharp s T0_S6 )
	 (lambda_sharp s_p accept_S2 )
	 )
	 )
	 )
	))
(assert (forall ((s S) (s_p S) (r1 Bool) (r2 Bool) (tie Bool)) (=> (and (and (and (lambda_ s T0_S6 )
	 (and (g1 s r1 r2 tie )
	 (g2 s r1 r2 tie )
	 )
	 )
	 (and true (= (tau s r1 r2 tie )
	 s_p )
	 )
	 )
	 true )
	 (and (lambda_ s_p accept_all )
	 (< (lambda_sharp s T0_S6 )
	 (lambda_sharp s_p accept_all )
	 )
	 )
	 )
	))

(check-sat)

